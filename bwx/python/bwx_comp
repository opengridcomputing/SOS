#!/usr/bin/env python

# Copyright (c) 2015-2016 Open Grid Computing, Inc. All rights reserved.
#
# This software is available to you under a choice of one of two
# licenses.  You may choose to be licensed under the terms of the GNU
# General Public License (GPL) Version 2, available from the file
# COPYING in the main directory of this source tree, or the BSD-type
# license below:
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#
#      Redistributions of source code must retain the above copyright
#      notice, this list of conditions and the following disclaimer.
#
#      Redistributions in binary form must reproduce the above
#      copyright notice, this list of conditions and the following
#      disclaimer in the documentation and/or other materials provided
#      with the distribution.
#
#      Neither the name of Open Grid Computing nor the names of any
#      contributors may be used to endorse or promote products derived
#      from this software without specific prior written permission.
#
#      Modified source versions must be plainly marked as such, and
#      must not be misrepresented as being the original software.
#
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
# OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

import numpy as np
import matplotlib.pyplot as plt
from matplotlib.patches import Rectangle
from matplotlib.collections import PatchCollection
import argparse
import sys
import os
from datetime import datetime
from sos import *

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Do stuff with Components.")
    parser.add_argument("--add", action = "store_true",
                        help="Add the components contained in the input file")
    parser.add_argument("--update", action = "store_true",
                        help="Update the components contained in the input file")
    parser.add_argument("--container",
                        help="Specify the SOS container")
    parser.add_argument("--start-time",
                        help="Specify the start time, format is YYYY/MM/DD HH:MM:SS")
    parser.add_argument("--duration",
                        type=int, default=3600,
                        help="Specify the duration, format is seconds ")
    args = parser.parse_args()
    if not args.container:
        print("The --container argument is required")
        sys.exit(1)

    if not args.start_time:
        print("The --start-time argument is required")
        sys.exit(1)

    try:
        container = sos.sos_container_open(args.container, sos.SOS_PERM_RO)
        comp_schema = sos.sos_schema_by_name(container, "Component")
        comp_id_attr = sos.sos_schema_attr_by_name(comp_schema, "Id")
        comp_id_iter = sos.sos_attr_iter_new(comp_id_attr)
        comptime_idx = sos.sos_index_open(container, "CompTime")
    except Exception as e:
        print("Exception {0}".foramt(str(e)))
        sys.exit(2)

    dt = datetime.strptime(args.start_time, "%Y/%m/%d %H:%M:%S")
    start_secs = int(dt.strftime("%s"))
    end_secs = start_secs + args.duration
    comptime_key = sos.sos_key_new(8)
    comptime_iter = sos.sos_index_iter_new(comptime_idx)
    rc = sos.sos_iter_begin(comp_id_iter)
    if rc:
        print("Error {0} on the component iterator".format(rc))
        sys.exit(3)
    fig, ax = plt.subplots()
    fig.set_size_inches((12, 10), forward=True)
    patches = []
    min_x = 1.0e6
    max_x = 0
    min_y = 1.0e6
    max_y = 0
    while rc == 0:
        comp_obj = sos.sos_iter_obj(comp_id_iter)
        compObj = SOS.Object(comp_obj)
        x = float(compObj.x_2d)
        if x < min_x:
            min_x = x
        if x > max_x:
            max_x = x
        y = float(compObj.y_2d)
        if y < min_y:
            min_y = x
        if y > max_y:
            max_y = y

        # Find the CompTime record that is less than or equal the start
        comptime = start_secs | (int(compObj.Id) << 32)
        rc = sos.sos_index_key_from_str(comptime_idx, comptime_key, str(comptime))
        rc = sos.sos_iter_inf(comptime_iter, comptime_key)
        r = None
        if rc == 0:
            job_obj = sos.sos_iter_obj(comptime_iter)
            jobObj = SOS.Object(job_obj)

            # test if the sample time window overlaps the job
            job_start = int(jobObj.StartTime)
            job_end = int(jobObj.EndTime)
            if (start_secs >= job_start and start_secs <= job_end) \
               or (end_secs >= job_start and end_secs <= job_end) \
               or (start_secs <= job_start and end_secs >= job_end):
                r = Rectangle((x+.05, y+.05), .80, .80,
                              edgecolor='black', facecolor='green',
                              linewidth=0.05)
            else:
                r = Rectangle((x+.05, y+.05), .80, .80,
                              edgecolor='black', facecolor='black',
                              linewidth=0.05)
        else:
            r = Rectangle((x+.05, y+.05), .80, .80,
                          edgecolor='black', facecolor='red',
                          linewidth=0.05)
        patches.append(r)
        rc = sos.sos_iter_next(comp_id_iter)
    print("x: {0} {1} y: {0} {1}".format(min_x, max_x, min_y, max_y))
    collection = PatchCollection(patches, match_original=True)
    ax.set_xlim(left=min_x, right=max_x, auto=True)
    ax.set_ylim(bottom=max_y, top=min_y, auto=True)
    ax.add_collection(collection)
    plt.show()
