#!/usr/bin/env python

# Copyright (c) 2015-2016 Open Grid Computing, Inc. All rights reserved.
#
# This software is available to you under a choice of one of two
# licenses.  You may choose to be licensed under the terms of the GNU
# General Public License (GPL) Version 2, available from the file
# COPYING in the main directory of this source tree, or the BSD-type
# license below:
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#
#      Redistributions of source code must retain the above copyright
#      notice, this list of conditions and the following disclaimer.
#
#      Redistributions in binary form must reproduce the above
#      copyright notice, this list of conditions and the following
#      disclaimer in the documentation and/or other materials provided
#      with the distribution.
#
#      Neither the name of Open Grid Computing nor the names of any
#      contributors may be used to endorse or promote products derived
#      from this software without specific prior written permission.
#
#      Modified source versions must be plainly marked as such, and
#      must not be misrepresented as being the original software.
#
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
# OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

import argparse
import sys
import os
import math

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Create a component input file for the sos_cmd.")
    parser.add_argument("--pfx",
                        help="Specify the component name prefix; default='nid'")
    parser.add_argument("--cols",
                        default=0,
                        help="Specify the number of rows")
    parser.add_argument("--first",
                        default=1,
                        help="Specify the first component number; default=1")
    parser.add_argument("--last",
                        default=1000,
                        help="Specify the last component number; default=1000")
    args = parser.parse_args()

    first = float(args.first)
    last = float(args.last)
    count = last - first + 1
    cols = math.sqrt(count)
    rows = int(count / cols)
    if count % cols:
        rows = rows + 1
    cur_col = 0
    cur_row = 0
    # print("# Id, State, Name, Description, CabinetId, x_3d, y_3d, z_3d, x_2d, y_2d")
    for comp_id in range(int(first), int(last)+1):
        print("{0},{1},{2},{3},{4},{5},{6},{7},{8},{9}".
              format(comp_id, 0, "{0}{1:05}".format(args.pfx, comp_id), "Compute Node", 0, 0, 0, 0,
                     cur_col, cur_row))
        cur_col = cur_col + 1
        if cur_col >= cols:
            cur_col = 0
            cur_row = cur_row + 1

